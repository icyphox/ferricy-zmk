/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define WORKMAN 0
#define NAV 1
#define NUM 2
#define SYM 3

#define bu C_BRI_UP
#define bd C_BRI_DN
#define vu C_VOL_UP
#define vd C_VOL_DN

#include "combos.dtsi"

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <165>;
};

/ {

    behaviors {
        sqt_dqt: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <165>;
            bindings = <&kp SQT>, <&kp DQT>;
        };
        q_esc: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <165>;
            bindings = <&kp Q>, <&kp ESC>;
        };
        scln_eql: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <165>;
            bindings = <&kp SCLN>, <&kp EQL>;
        };
    };

    combos {
        compatible = "zmk,combos";
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                  &q_esc       &kp D         &kp R        &kp W        &kp B               &kp J        &kp F        &kp U           &kp P          &scln_eql
                  &mt LCTRL A  &mt LSHIFT S  &mt LALT H   &mt LGUI T   &kp G               &kp Y        &mt RGUI N   &mt RALT E      &mt RSHIFT O   &mt RCTRL I
                  &kp Z        &kp X         &kp M        &kp C        &kp V               &kp K        &kp L        &kp CMMA        &kp DOT        &kp FSLH
                                                      &kp TAB    &lt NAV SPC               &lt SYM RET  &lt NUM BSPC
                >;
        };

        nav_layer {
            bindings = <
                &kp vd     &kp vu      &trans        &trans       &trans                   &trans      &kp LBRC   &kp RBRC   &kp LPAR    &kp RPAR
                &kp bd     &kp bu      &trans        &trans       &trans                   &kp LEFT    &kp DOWN   &kp UP     &kp RIGHT   &sqt_dqt
                &trans     &trans      &bootloader   &reset       &trans                   &trans      &kp LBKT   &kp RBKT   &trans      &trans
                                                     &trans       &trans                   &kp ESC     &trans
                >;
        };

        num_layer {
            bindings = <
                &kp GRAVE      &kp N7      &kp N8       &kp N9     &kp ESC                 &trans      &trans     &trans     &trans    &trans
                &kp SQT        &kp N4      &kp N5       &kp N6     &kp KP_EQUAL            &trans      &trans     &trans     &trans    &trans
                &caps_word     &kp N1      &kp N2       &kp N3     &kp BSLH                &trans      &trans     &trans     &trans    &trans
                                                        &kp N0     &kp KP_MINUS            &trans      &trans
                >;
       };

       sym_layer {
            bindings = <
                &kp TILDE     &kp AMPS     &kp STAR      &kp LPAR     &kp ESC              &trans      &trans        &trans  &trans    &trans
                &kp DQT       &kp DLLR     &kp PRCNT     &kp CARET    &kp KP_PLUS          &trans      &trans        &trans  &trans    &trans
                &caps_word    &kp EXCL     &kp A T       &kp HASH     &kp PIPE             &reset      &bootloader   &trans  &trans    &trans
                                                         &kp RPAR     &kp UNDER            &trans      &trans
                >;
        };
    };
};
